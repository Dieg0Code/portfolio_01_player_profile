basePath: /api/v1
definitions:
  request.CreateAchievementRequest:
    properties:
      description:
        description: Achievement description
        maxLength: 255
        minLength: 5
        type: string
      name:
        description: Achievement name
        maxLength: 255
        minLength: 5
        type: string
    required:
    - description
    - name
    type: object
  request.CreatePlayerProfileRequest:
    properties:
      avatar:
        description: Player avatar
        type: string
      experience:
        description: Player experience
        type: integer
      level:
        description: Player level
        type: integer
      nickname:
        description: Player nickname
        maxLength: 20
        minLength: 3
        type: string
      point:
        description: Player points
        type: integer
      user_id:
        description: User ID (foreign key) in the database
        type: integer
    required:
    - avatar
    - experience
    - level
    - nickname
    - point
    - user_id
    type: object
  request.CreateUserRequest:
    properties:
      age:
        description: User age
        minimum: 18
        type: integer
      email:
        description: User email
        type: string
      password:
        description: User password
        maxLength: 255
        minLength: 8
        type: string
      user_name:
        description: User name
        maxLength: 255
        minLength: 3
        type: string
    required:
    - age
    - email
    - password
    - user_name
    type: object
  request.LoginRequest:
    properties:
      email:
        description: User email
        type: string
      password:
        description: User password
        type: string
    required:
    - email
    - password
    type: object
  request.UpdateAchievementRequest:
    properties:
      description:
        description: Achievement description
        maxLength: 255
        minLength: 5
        type: string
      name:
        description: Achievement name
        maxLength: 255
        minLength: 5
        type: string
    required:
    - description
    - name
    type: object
  request.UpdatePlayerProfileRequest:
    properties:
      avatar:
        description: Player avatar
        type: string
      experience:
        description: Player experience
        type: integer
      level:
        description: Player level
        type: integer
      nickname:
        description: Player nickname
        maxLength: 20
        minLength: 3
        type: string
      points:
        description: Player points
        type: integer
    required:
    - avatar
    - experience
    - level
    - nickname
    - points
    type: object
  request.UpdateUserRequest:
    properties:
      age:
        description: User age
        minimum: 18
        type: integer
      email:
        description: User email
        type: string
      user_name:
        description: User name
        maxLength: 20
        minLength: 3
        type: string
    required:
    - age
    - email
    - user_name
    type: object
  response.AchievementResponse:
    properties:
      description:
        description: Achievement description
        maxLength: 255
        minLength: 5
        type: string
      id:
        description: Achievement ID (primary key) in the database
        type: integer
      name:
        description: Achievement name
        maxLength: 255
        minLength: 3
        type: string
    required:
    - description
    - id
    - name
    type: object
  response.BaseResponse:
    description: Base response structure
    properties:
      code:
        description: HTTP status code of the response
        example: 200
        type: integer
        x-order: "0"
      data:
        description: Data payload of the response
        x-order: "3"
      message:
        description: Message of the response
        example: Operation completed successfully
        type: string
        x-order: "2"
      status:
        description: Status of the response
        example: success
        type: string
        x-order: "1"
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple API for managing player profiles and achievements
  title: Player Profile API
  version: "1.0"
paths:
  /achievements:
    get:
      consumes:
      - application/json
      description: Get all achievements with pagination, default page is 1 and default
        pageSize is 10
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.AchievementResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get all achievements
      tags:
      - Achievement
    post:
      consumes:
      - application/json
      description: Create a new achievement with the input payload
      parameters:
      - description: Create Achievement Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateAchievementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Create a new achievement
      tags:
      - Achievement
  /achievements/{achievementID}:
    delete:
      consumes:
      - application/json
      description: Delete an achievement by ID
      parameters:
      - description: Achievement ID
        in: path
        name: achievementID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete an achievement
      tags:
      - Achievement
    get:
      consumes:
      - application/json
      description: Get an achievement by ID
      parameters:
      - description: Achievement ID
        in: path
        name: achievementID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get an achievement by ID
      tags:
      - Achievement
    put:
      consumes:
      - application/json
      description: Update an achievement with the input payload
      parameters:
      - description: Achievement ID
        in: path
        name: achievementID
        required: true
        type: integer
      - description: Update Achievement Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateAchievementRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update an achievement
      tags:
      - Achievement
  /achievements/{achievementID}/players:
    get:
      consumes:
      - application/json
      description: Get an achievement with players by ID
      parameters:
      - description: Achievement ID
        in: path
        name: achievementID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get an achievement with players
      tags:
      - Achievement
  /login:
    post:
      consumes:
      - application/json
      description: Login to the application with the input payload
      parameters:
      - description: Login Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Login to the application
      tags:
      - Auth
  /players:
    get:
      consumes:
      - application/json
      description: Get all players with pagination, by default page is 1 and pageSize
        is 10
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get all players
      tags:
      - Player
    post:
      consumes:
      - application/json
      description: Create a new player profile with the input payload
      parameters:
      - description: Create Player Profile Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreatePlayerProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Create a new player profile
      tags:
      - Player
  /players/{playerID}:
    delete:
      consumes:
      - application/json
      description: Delete player by ID
      parameters:
      - description: Player ID
        in: path
        name: playerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete player by ID
      tags:
      - Player
    get:
      consumes:
      - application/json
      description: Get player by ID
      parameters:
      - description: Player ID
        in: path
        name: playerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get player by ID
      tags:
      - Player
    put:
      consumes:
      - application/json
      description: Update player by ID
      parameters:
      - description: Player ID
        in: path
        name: playerID
        required: true
        type: integer
      - description: Update Player Profile Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePlayerProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update player by ID
      tags:
      - Player
  /players/{playerID}/achievements:
    get:
      consumes:
      - application/json
      description: Get player with achievements by ID
      parameters:
      - description: Player ID
        in: path
        name: playerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get player with achievements by ID
      tags:
      - Player
  /users:
    get:
      consumes:
      - application/json
      description: Get all users, can be paginated, default page is 1 and default
        pageSize is 10
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get all users
      tags:
      - User
      x-order: 1
    post:
      consumes:
      - application/json
      description: Create a new user with the input payload
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Create a new user
      tags:
      - User
      x-order: 0
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Delete user by ID
      tags:
      - User
      x-order: 4
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Get user by ID
      tags:
      - User
      x-order: 2
    put:
      consumes:
      - application/json
      description: Update user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Update User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Update user by ID
      tags:
      - User
      x-order: 3
swagger: "2.0"
tags:
- name: Auth
- name: User
- name: Player
- name: Achievement
